apply plugin: 'com.android.application'
apply from: '../common.gradle'
//apply plugin: 'android-aspectjx'
apply plugin: 'org.jetbrains.kotlin.android'


// Android 代码规范文档：https://github.com/getActivity/AndroidCodeStandard
android {
    namespace "com.hjq.copy"
//    compileSdkVersion 34
//    buildToolsVersion '34.0.0'
    // 资源目录存放指引：https://developer.android.google.cn/guide/topics/resources/providing-resources
    defaultConfig {
        versionCode 22
        versionName "20250409"
        // 无痛修改包名：https://www.jianshu.com/p/17327e191d2e
        applicationId 'com.juhui2024.demo'
        multiDexEnabled true
        // 仅保留中文语种的资源
//        resConfigs 'zh'

        // 仅保留 xxhdpi 图片资源（目前主流分辨率 1920 * 1080）
        resConfigs 'xxhdpi'

        // 混淆配置
        proguardFiles 'proguard-sdk.pro', 'proguard-app.pro'

        // 日志打印开关
        buildConfigField('boolean', 'LOG_ENABLE', '' + LOG_ENABLE + '')
        // 测试包下的 BuglyId
        buildConfigField('String', 'BUGLY_ID', '"' + BUGLY_ID + '"')
        // 测试服务器的主机地址
        buildConfigField('String', 'HOST_URL', '"' + HOST_URL + '"')
        vectorDrawables {
            useSupportLibrary true
        }
        ndk {
            // 警告：无特殊情况不要改这里了  armeabi：万金油架构平台（占用率：0%）
            // armeabi-v7a：开发板应用 仅选择  ；曾经主流的架构平台（占用率：10%）
            // arm64-v8a：普通手机应用 仅选择 ；目前主流架构平台（占用率：95%）
            abiFilters 'armeabi-v7a',"arm64-v8a"
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    // Apk 签名的那些事：https://www.jianshu.com/p/a1f8e5896aa2
    signingConfigs {
        config {
            storeFile file(StoreFile)
            storePassword StorePassword
            keyAlias KeyAlias
            keyPassword KeyPassword
        }
    }

    // 构建配置：https://developer.android.google.cn/studio/build/build-variants
    buildTypes {

        debug {
            // 给包名添加后缀
//            applicationIdSuffix '.debug'// 没特殊需要 别开这玩意
            // 调试模式开关
            debuggable true
            jniDebuggable true
            // 压缩对齐开关
            zipAlignEnabled false
            // 移除无用的资源
            shrinkResources false
            // 代码混淆开关
            minifyEnabled false
            // 签名信息配置
            signingConfig signingConfigs.config
            // 添加清单占位符
            addManifestPlaceholders(['app_name': '范例工程-dev'])

        }

        preview.initWith(debug)
        preview {
            // 调试模式开关
            debuggable true
            jniDebuggable true
            // 压缩对齐开关
            zipAlignEnabled false
            // 移除无用的资源
            shrinkResources false
            applicationIdSuffix ''
            minifyEnabled false
            // 添加清单占位符
            addManifestPlaceholders(['app_name': '范例工程pre'])
        }

        release {
            // 调试模式开关
            debuggable false
            jniDebuggable false
            // 压缩对齐开关
            zipAlignEnabled true
            // 移除无用的资源
            shrinkResources true
            // 代码混淆开关
            minifyEnabled true
            // 签名信息配置
            signingConfig signingConfigs.config
            // 添加清单占位符
            addManifestPlaceholders(['app_name': '@string/app_name'])
        }
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）
        exclude 'META-INF/*******'
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    // AOP 配置（exclude 和 include 二选一）
    // 需要进行配置，否则就会引发冲突，具体表现为：
    // 第一种：编译不过去，报错：java.util.zip.ZipException：Cause: zip file is empty
    // 第二种：编译能过去，但运行时报错：ClassNotFoundException: Didn't find class on path: DexPathList
    /*aspectjx {
        // 排除一些第三方库的包名（Gson、 LeakCanary 和 AOP 有冲突）
        // exclude 'android==x', 'com.google', 'com.squareup', 'org.apache', 'com.alipay', 'com.taobao', 'versions.9'
        // 只对以下包名做 AOP 处理
        include android.defaultConfig.applicationId
        exclude 'org.jetbrains.kotlin', "module-info", 'versions.9'
    }*/
    buildFeatures {
        compose false
        buildConfig true
        dataBinding false
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }
    namespace 'com.hjq.copy'

    applicationVariants.all { variant ->
        // apk 输出文件名配置
        variant.outputs.all { output ->
            outputFileName = 'juhui_android_vCode' + variant.versionCode + '_vName' + variant.versionName + '_' + variant.buildType.name
            if (variant.buildType.name == buildTypes.release.getName()) {
                outputFileName += '_' + new Date().format('MMdd')
            }
            outputFileName += '.apk'
        }
    }
}
/*afterEvaluate {
    // 前提条件是这个 Module 工程必须是 Library 类型，并且排除名为 umeng 的 Module 工程
    // 排除 BuildConfig.class
    if (android.defaultConfig.applicationId == null && "umeng" != getName()) {
        // 排除 BuildConfig.class
        generateReleaseBuildConfig.enabled = false
        generatePreviewBuildConfig.enabled = false
        generateDebugBuildConfig.enabled = false
    }
}*/
// 添加构建依赖项：https://developer.android.google.cn/studio/build/dependencies
// api 与 implementation 的区别：https://www.jianshu.com/p/8962d6ba936e
dependencies {
    // 基类封装       无特殊情况  请勿在模块级配置文件增加依赖！！！！！！！！！！！！！！！！
    api project(':app')
    // 控件封装
//    implementation project(':library:widget')

    kapt 'com.alibaba:arouter-compiler:1.5.2'
    implementation 'com.alibaba:arouter-api:1.5.2'
}